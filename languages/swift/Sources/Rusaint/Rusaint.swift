// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(RusaintFFI)
import RusaintFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_rusaint_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_rusaint_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol ChapelApplicationProtocol : AnyObject {
    
    func information(year: UInt32, semester: SemesterType) async throws  -> ChapelInformation
    
}

open class ChapelApplication:
    ChapelApplicationProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_chapelapplication(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_chapelapplication(pointer, $0) }
    }

    

    
open func information(year: UInt32, semester: SemesterType)async throws  -> ChapelInformation {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_chapelapplication_information(
                    self.uniffiClonePointer(),
                    FfiConverterUInt32.lower(year),FfiConverterTypeSemesterType_lower(semester)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeChapelInformation_lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    

}

public struct FfiConverterTypeChapelApplication: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChapelApplication

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChapelApplication {
        return ChapelApplication(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChapelApplication) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChapelApplication {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChapelApplication, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeChapelApplication_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChapelApplication {
    return try FfiConverterTypeChapelApplication.lift(pointer)
}

public func FfiConverterTypeChapelApplication_lower(_ value: ChapelApplication) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChapelApplication.lower(value)
}




public protocol ChapelApplicationBuilderProtocol : AnyObject {
    
    func build(session: USaintSession) async throws  -> ChapelApplication
    
}

open class ChapelApplicationBuilder:
    ChapelApplicationBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_chapelapplicationbuilder(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_rusaint_ffi_fn_constructor_chapelapplicationbuilder_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_chapelapplicationbuilder(pointer, $0) }
    }

    

    
open func build(session: USaintSession)async throws  -> ChapelApplication {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_chapelapplicationbuilder_build(
                    self.uniffiClonePointer(),
                    FfiConverterTypeUSaintSession.lower(session)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_pointer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_pointer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeChapelApplication.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    

}

public struct FfiConverterTypeChapelApplicationBuilder: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChapelApplicationBuilder

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChapelApplicationBuilder {
        return ChapelApplicationBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChapelApplicationBuilder) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChapelApplicationBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChapelApplicationBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeChapelApplicationBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChapelApplicationBuilder {
    return try FfiConverterTypeChapelApplicationBuilder.lift(pointer)
}

public func FfiConverterTypeChapelApplicationBuilder_lower(_ value: ChapelApplicationBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChapelApplicationBuilder.lower(value)
}




public protocol CourseGradesApplicationProtocol : AnyObject {
    
    /**
     * 전체 학기의 증명 평점 정보를 가져옵니다.
     */
    func certificatedSummary(courseType: CourseType) async throws  -> GradeSummary
    
    /**
     * 주어진 수업의 상세 성적 정보를 가져옵니다.
     */
    func classDetail(courseType: CourseType, year: String, semester: SemesterType, code: String) async throws  -> [String: Float]
    
    /**
     * 주어진 학기의 수업별 성적을 가져옵니다. `include_details`가 `true`인 경우 수업의 상세 성적도 가져옵니다.
     * 수업의 상세 성적까지 가져올 경우 상세 성적이 있는 수업의 수 만큼 서버에 요청을 보내므로 반드시 상세 성적도 한번에 가져와야 할 때에만 사용하십시오.
     *
     * 수업 성적을 가져온 이후 상세 성적 또한 가져오려면 `[class_detail()]`함수를 이용하십시오.
     */
    func classes(courseType: CourseType, year: String, semester: SemesterType, includeDetails: Bool) async throws  -> [ClassGrade]
    
    /**
     * 전체 학기의 학적부 평점 정보를 가져옵니다.
     */
    func recordedSummary(courseType: CourseType) async throws  -> GradeSummary
    
    /**
     * 학기별 평점 정보를 가져옵니다.
     */
    func semesters(courseType: CourseType) async throws  -> [SemesterGrade]
    
}

open class CourseGradesApplication:
    CourseGradesApplicationProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_coursegradesapplication(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_coursegradesapplication(pointer, $0) }
    }

    

    
    /**
     * 전체 학기의 증명 평점 정보를 가져옵니다.
     */
open func certificatedSummary(courseType: CourseType)async throws  -> GradeSummary {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursegradesapplication_certificated_summary(
                    self.uniffiClonePointer(),
                    FfiConverterTypeCourseType_lower(courseType)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeGradeSummary_lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    
    /**
     * 주어진 수업의 상세 성적 정보를 가져옵니다.
     */
open func classDetail(courseType: CourseType, year: String, semester: SemesterType, code: String)async throws  -> [String: Float] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursegradesapplication_class_detail(
                    self.uniffiClonePointer(),
                    FfiConverterTypeCourseType_lower(courseType),FfiConverterString.lower(year),FfiConverterTypeSemesterType_lower(semester),FfiConverterString.lower(code)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterDictionaryStringFloat.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    
    /**
     * 주어진 학기의 수업별 성적을 가져옵니다. `include_details`가 `true`인 경우 수업의 상세 성적도 가져옵니다.
     * 수업의 상세 성적까지 가져올 경우 상세 성적이 있는 수업의 수 만큼 서버에 요청을 보내므로 반드시 상세 성적도 한번에 가져와야 할 때에만 사용하십시오.
     *
     * 수업 성적을 가져온 이후 상세 성적 또한 가져오려면 `[class_detail()]`함수를 이용하십시오.
     */
open func classes(courseType: CourseType, year: String, semester: SemesterType, includeDetails: Bool)async throws  -> [ClassGrade] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursegradesapplication_classes(
                    self.uniffiClonePointer(),
                    FfiConverterTypeCourseType_lower(courseType),FfiConverterString.lower(year),FfiConverterTypeSemesterType_lower(semester),FfiConverterBool.lower(includeDetails)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeClassGrade.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    
    /**
     * 전체 학기의 학적부 평점 정보를 가져옵니다.
     */
open func recordedSummary(courseType: CourseType)async throws  -> GradeSummary {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursegradesapplication_recorded_summary(
                    self.uniffiClonePointer(),
                    FfiConverterTypeCourseType_lower(courseType)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeGradeSummary_lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    
    /**
     * 학기별 평점 정보를 가져옵니다.
     */
open func semesters(courseType: CourseType)async throws  -> [SemesterGrade] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursegradesapplication_semesters(
                    self.uniffiClonePointer(),
                    FfiConverterTypeCourseType_lower(courseType)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeSemesterGrade.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    

}

public struct FfiConverterTypeCourseGradesApplication: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CourseGradesApplication

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseGradesApplication {
        return CourseGradesApplication(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CourseGradesApplication) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CourseGradesApplication {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CourseGradesApplication, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeCourseGradesApplication_lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseGradesApplication {
    return try FfiConverterTypeCourseGradesApplication.lift(pointer)
}

public func FfiConverterTypeCourseGradesApplication_lower(_ value: CourseGradesApplication) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCourseGradesApplication.lower(value)
}




public protocol CourseGradesApplicationBuilderProtocol : AnyObject {
    
    func build(session: USaintSession) async throws  -> CourseGradesApplication
    
}

open class CourseGradesApplicationBuilder:
    CourseGradesApplicationBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_coursegradesapplicationbuilder(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_rusaint_ffi_fn_constructor_coursegradesapplicationbuilder_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_coursegradesapplicationbuilder(pointer, $0) }
    }

    

    
open func build(session: USaintSession)async throws  -> CourseGradesApplication {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursegradesapplicationbuilder_build(
                    self.uniffiClonePointer(),
                    FfiConverterTypeUSaintSession.lower(session)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_pointer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_pointer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeCourseGradesApplication.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    

}

public struct FfiConverterTypeCourseGradesApplicationBuilder: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CourseGradesApplicationBuilder

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseGradesApplicationBuilder {
        return CourseGradesApplicationBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CourseGradesApplicationBuilder) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CourseGradesApplicationBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CourseGradesApplicationBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeCourseGradesApplicationBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseGradesApplicationBuilder {
    return try FfiConverterTypeCourseGradesApplicationBuilder.lift(pointer)
}

public func FfiConverterTypeCourseGradesApplicationBuilder_lower(_ value: CourseGradesApplicationBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCourseGradesApplicationBuilder.lower(value)
}




public protocol CourseScheduleApplicationProtocol : AnyObject {
    
    /**
     * 학기, 학년도, 강의 분류를 통해 강의를 찾습니다.
     */
    func findLectures(year: UInt32, period: SemesterType, lectureCategory: LectureCategory) async throws  -> [Lecture]
    
}

open class CourseScheduleApplication:
    CourseScheduleApplicationProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_coursescheduleapplication(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_coursescheduleapplication(pointer, $0) }
    }

    

    
    /**
     * 학기, 학년도, 강의 분류를 통해 강의를 찾습니다.
     */
open func findLectures(year: UInt32, period: SemesterType, lectureCategory: LectureCategory)async throws  -> [Lecture] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursescheduleapplication_find_lectures(
                    self.uniffiClonePointer(),
                    FfiConverterUInt32.lower(year),FfiConverterTypeSemesterType_lower(period),FfiConverterTypeLectureCategory_lower(lectureCategory)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeLecture.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    

}

public struct FfiConverterTypeCourseScheduleApplication: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CourseScheduleApplication

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseScheduleApplication {
        return CourseScheduleApplication(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CourseScheduleApplication) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CourseScheduleApplication {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CourseScheduleApplication, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeCourseScheduleApplication_lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseScheduleApplication {
    return try FfiConverterTypeCourseScheduleApplication.lift(pointer)
}

public func FfiConverterTypeCourseScheduleApplication_lower(_ value: CourseScheduleApplication) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCourseScheduleApplication.lower(value)
}




public protocol CourseScheduleApplicationBuilderProtocol : AnyObject {
    
    func build(session: USaintSession) async throws  -> CourseScheduleApplication
    
}

open class CourseScheduleApplicationBuilder:
    CourseScheduleApplicationBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_coursescheduleapplicationbuilder(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_rusaint_ffi_fn_constructor_coursescheduleapplicationbuilder_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_coursescheduleapplicationbuilder(pointer, $0) }
    }

    

    
open func build(session: USaintSession)async throws  -> CourseScheduleApplication {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_coursescheduleapplicationbuilder_build(
                    self.uniffiClonePointer(),
                    FfiConverterTypeUSaintSession.lower(session)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_pointer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_pointer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeCourseScheduleApplication.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    

}

public struct FfiConverterTypeCourseScheduleApplicationBuilder: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CourseScheduleApplicationBuilder

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseScheduleApplicationBuilder {
        return CourseScheduleApplicationBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CourseScheduleApplicationBuilder) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CourseScheduleApplicationBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CourseScheduleApplicationBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeCourseScheduleApplicationBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> CourseScheduleApplicationBuilder {
    return try FfiConverterTypeCourseScheduleApplicationBuilder.lift(pointer)
}

public func FfiConverterTypeCourseScheduleApplicationBuilder_lower(_ value: CourseScheduleApplicationBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCourseScheduleApplicationBuilder.lower(value)
}




public protocol USaintSessionProtocol : AnyObject {
    
}

open class USaintSession:
    USaintSessionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_usaintsession(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_usaintsession(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeUSaintSession: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = USaintSession

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> USaintSession {
        return USaintSession(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: USaintSession) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> USaintSession {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: USaintSession, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeUSaintSession_lift(_ pointer: UnsafeMutableRawPointer) throws -> USaintSession {
    return try FfiConverterTypeUSaintSession.lift(pointer)
}

public func FfiConverterTypeUSaintSession_lower(_ value: USaintSession) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUSaintSession.lower(value)
}




public protocol USaintSessionBuilderProtocol : AnyObject {
    
    func anonymous()  -> USaintSession
    
    func withPassword(id: String, password: String) async throws  -> USaintSession
    
    func withToken(id: String, token: String) async throws  -> USaintSession
    
}

open class USaintSessionBuilder:
    USaintSessionBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_rusaint_ffi_fn_clone_usaintsessionbuilder(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_rusaint_ffi_fn_constructor_usaintsessionbuilder_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_rusaint_ffi_fn_free_usaintsessionbuilder(pointer, $0) }
    }

    

    
open func anonymous() -> USaintSession {
    return try!  FfiConverterTypeUSaintSession.lift(try! rustCall() {
    uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_anonymous(self.uniffiClonePointer(),$0
    )
})
}
    
open func withPassword(id: String, password: String)async throws  -> USaintSession {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_password(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(id),FfiConverterString.lower(password)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_pointer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_pointer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeUSaintSession.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    
open func withToken(id: String, token: String)async throws  -> USaintSession {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_rusaint_ffi_fn_method_usaintsessionbuilder_with_token(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(id),FfiConverterString.lower(token)
                )
            },
            pollFunc: ffi_rusaint_ffi_rust_future_poll_pointer,
            completeFunc: ffi_rusaint_ffi_rust_future_complete_pointer,
            freeFunc: ffi_rusaint_ffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeUSaintSession.lift,
            errorHandler: FfiConverterTypeRusaintError.lift
        )
}
    

}

public struct FfiConverterTypeUSaintSessionBuilder: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = USaintSessionBuilder

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> USaintSessionBuilder {
        return USaintSessionBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: USaintSessionBuilder) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> USaintSessionBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: USaintSessionBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeUSaintSessionBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> USaintSessionBuilder {
    return try FfiConverterTypeUSaintSessionBuilder.lift(pointer)
}

public func FfiConverterTypeUSaintSessionBuilder_lower(_ value: USaintSessionBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUSaintSessionBuilder.lower(value)
}


public enum RusaintError {

    
    
    case General(message: String)
    
}


public struct FfiConverterTypeRusaintError: FfiConverterRustBuffer {
    typealias SwiftType = RusaintError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RusaintError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .General(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RusaintError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .General(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension RusaintError: Equatable, Hashable {}

extension RusaintError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

fileprivate struct FfiConverterSequenceTypeClassGrade: FfiConverterRustBuffer {
    typealias SwiftType = [ClassGrade]

    public static func write(_ value: [ClassGrade], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeClassGrade.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ClassGrade] {
        let len: Int32 = try readInt(&buf)
        var seq = [ClassGrade]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeClassGrade.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeLecture: FfiConverterRustBuffer {
    typealias SwiftType = [Lecture]

    public static func write(_ value: [Lecture], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLecture.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Lecture] {
        let len: Int32 = try readInt(&buf)
        var seq = [Lecture]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLecture.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeSemesterGrade: FfiConverterRustBuffer {
    typealias SwiftType = [SemesterGrade]

    public static func write(_ value: [SemesterGrade], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSemesterGrade.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SemesterGrade] {
        let len: Int32 = try readInt(&buf)
        var seq = [SemesterGrade]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSemesterGrade.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringFloat: FfiConverterRustBuffer {
    public static func write(_ value: [String: Float], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterFloat.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Float] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Float]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterFloat.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
















private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_rusaint_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_chapelapplication_information() != 37004) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_chapelapplicationbuilder_build() != 26230) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursegradesapplication_certificated_summary() != 8880) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursegradesapplication_class_detail() != 21134) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursegradesapplication_classes() != 47779) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursegradesapplication_recorded_summary() != 3787) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursegradesapplication_semesters() != 55958) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursegradesapplicationbuilder_build() != 62686) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursescheduleapplication_find_lectures() != 997) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_coursescheduleapplicationbuilder_build() != 53443) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_anonymous() != 36926) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_password() != 40543) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_method_usaintsessionbuilder_with_token() != 11778) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_constructor_chapelapplicationbuilder_new() != 2611) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_constructor_coursegradesapplicationbuilder_new() != 38514) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_constructor_coursescheduleapplicationbuilder_new() != 52460) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_rusaint_ffi_checksum_constructor_usaintsessionbuilder_new() != 62223) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all